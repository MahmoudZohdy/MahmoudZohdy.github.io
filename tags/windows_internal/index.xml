<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Windows_Internal on Security Blog</title>
    <link>https://MahmoudZohdy.github.io/tags/windows_internal/</link>
    <description>Recent content in Windows_Internal on Security Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://MahmoudZohdy.github.io/tags/windows_internal/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>An Overview of windows kernel loader and its variants</title>
      <link>https://MahmoudZohdy.github.io/posts/an_overview_of_windows_kernel_loader_and_its_variants/</link>
      <pubDate>Thu, 21 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://MahmoudZohdy.github.io/posts/an_overview_of_windows_kernel_loader_and_its_variants/</guid>
      <description>In this log post i will discuss the history of the use of window kernel loaders (reflectively mapping unsigned driver to kernel memory) and the increased number of signed loaders that is found on open-source repos and the adaption for it by the Threat actors.
Windows Kernel architecture: Windows OS is divided into two main components: the user-mode (also known as &amp;ldquo;ring 3&amp;rdquo;) and the kernel-mode (also known as &amp;ldquo;ring 0&amp;rdquo;) parts.</description>
    </item>
    
    <item>
      <title>An Overview of windows kernel loader and its variants</title>
      <link>https://MahmoudZohdy.github.io/posts/cti/an_overview_of_windows_kernel_loader_and_its_variants/</link>
      <pubDate>Thu, 21 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://MahmoudZohdy.github.io/posts/cti/an_overview_of_windows_kernel_loader_and_its_variants/</guid>
      <description>In this log post i will discuss the history of the use of window kernel loaders (reflectively mapping unsigned driver to kernel memory) and the increased number of signed loaders that is found on open-source repos and the adaption for it by the Threat actors.
Windows Kernel architecture: Windows OS is divided into two main components: the user-mode (also known as &amp;ldquo;ring 3&amp;rdquo;) and the kernel-mode (also known as &amp;ldquo;ring 0&amp;rdquo;) parts.</description>
    </item>
    
    <item>
      <title>Loaded Drivers Enumeration</title>
      <link>https://MahmoudZohdy.github.io/posts/practical_reverse_engineering/enumerate_loaded_drivers_every_10sec/</link>
      <pubDate>Sat, 20 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://MahmoudZohdy.github.io/posts/practical_reverse_engineering/enumerate_loaded_drivers_every_10sec/</guid>
      <description>In this Blog I will explain my approach for solving one of the exercises from Practical Reverse Engineering Book, which is enumerating the loaded module list every 10 minutes.
So after searching for the method to get all loaded Drivers on the system, I found there is an easy way you can to do it from user-mode (1) but I to do it using kernel mode driver and I want it to be stable on all windows versions.</description>
    </item>
    
    <item>
      <title>Asynchronous Procedure Calls (APC) Enumeration</title>
      <link>https://MahmoudZohdy.github.io/posts/practical_reverse_engineering/apcenumeration/</link>
      <pubDate>Sat, 13 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://MahmoudZohdy.github.io/posts/practical_reverse_engineering/apcenumeration/</guid>
      <description>In this Blog I will explain my approach for solving one of the exercises from Practical Reverse Engineering Book, which is enumerating kernel/user Asynchronous Procedure Calls (APC) of a process.
So I started Reverse Engineering Some of the APC related functions, creating windows kernel driver that uses APC in different situation and use Windbg to add breakpoint on the APC callback functions to see how it is dispatched, plus Reading lots of blogs and documentation on how APC is working and how it is dispatched</description>
    </item>
    
  </channel>
</rss>
